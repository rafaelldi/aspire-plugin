//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace AspireSessionHost.Generated
{
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:16</p>
  /// </summary>
  public class AspireSessionHostModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdCall<SessionModel, SessionCreationResult> CreateSession => _CreateSession;
    [NotNull] public IRdCall<string, bool> DeleteSession => _DeleteSession;
    [NotNull] public ISource<AspireSessionHost.Generated.ProcessStarted> ProcessStarted => _ProcessStarted;
    [NotNull] public ISource<AspireSessionHost.Generated.ProcessTerminated> ProcessTerminated => _ProcessTerminated;
    [NotNull] public ISource<AspireSessionHost.Generated.LogReceived> LogReceived => _LogReceived;
    [NotNull] public IViewableMap<string, ResourceWrapper> Resources => _Resources;
    [NotNull] public IViewableList<ResourceMetricId> MetricIds => _MetricIds;
    [NotNull] public IRdEndpoint<ResourceMetricId, ResourceMetricDetails> GetMetricDetails => _GetMetricDetails;
    [NotNull] public IRdEndpoint<ResourceMetricId, ResourceMetricPoint> GetCurrentMetricPoint => _GetCurrentMetricPoint;
    [NotNull] public IRdEndpoint<Unit, TraceNode[]> GetTraceNodes => _GetTraceNodes;
    
    //private fields
    [NotNull] private readonly RdCall<SessionModel, SessionCreationResult> _CreateSession;
    [NotNull] private readonly RdCall<string, bool> _DeleteSession;
    [NotNull] private readonly RdSignal<AspireSessionHost.Generated.ProcessStarted> _ProcessStarted;
    [NotNull] private readonly RdSignal<AspireSessionHost.Generated.ProcessTerminated> _ProcessTerminated;
    [NotNull] private readonly RdSignal<AspireSessionHost.Generated.LogReceived> _LogReceived;
    [NotNull] private readonly RdMap<string, ResourceWrapper> _Resources;
    [NotNull] private readonly RdList<ResourceMetricId> _MetricIds;
    [NotNull] private readonly RdCall<ResourceMetricId, ResourceMetricDetails> _GetMetricDetails;
    [NotNull] private readonly RdCall<ResourceMetricId, ResourceMetricPoint> _GetCurrentMetricPoint;
    [NotNull] private readonly RdCall<Unit, TraceNode[]> _GetTraceNodes;
    
    //primary constructor
    private AspireSessionHostModel(
      [NotNull] RdCall<SessionModel, SessionCreationResult> createSession,
      [NotNull] RdCall<string, bool> deleteSession,
      [NotNull] RdSignal<AspireSessionHost.Generated.ProcessStarted> processStarted,
      [NotNull] RdSignal<AspireSessionHost.Generated.ProcessTerminated> processTerminated,
      [NotNull] RdSignal<AspireSessionHost.Generated.LogReceived> logReceived,
      [NotNull] RdMap<string, ResourceWrapper> resources,
      [NotNull] RdList<ResourceMetricId> metricIds,
      [NotNull] RdCall<ResourceMetricId, ResourceMetricDetails> getMetricDetails,
      [NotNull] RdCall<ResourceMetricId, ResourceMetricPoint> getCurrentMetricPoint,
      [NotNull] RdCall<Unit, TraceNode[]> getTraceNodes
    )
    {
      if (createSession == null) throw new ArgumentNullException("createSession");
      if (deleteSession == null) throw new ArgumentNullException("deleteSession");
      if (processStarted == null) throw new ArgumentNullException("processStarted");
      if (processTerminated == null) throw new ArgumentNullException("processTerminated");
      if (logReceived == null) throw new ArgumentNullException("logReceived");
      if (resources == null) throw new ArgumentNullException("resources");
      if (metricIds == null) throw new ArgumentNullException("metricIds");
      if (getMetricDetails == null) throw new ArgumentNullException("getMetricDetails");
      if (getCurrentMetricPoint == null) throw new ArgumentNullException("getCurrentMetricPoint");
      if (getTraceNodes == null) throw new ArgumentNullException("getTraceNodes");
      
      _CreateSession = createSession;
      _DeleteSession = deleteSession;
      _ProcessStarted = processStarted;
      _ProcessTerminated = processTerminated;
      _LogReceived = logReceived;
      _Resources = resources;
      _MetricIds = metricIds;
      _GetMetricDetails = getMetricDetails;
      _GetCurrentMetricPoint = getCurrentMetricPoint;
      _GetTraceNodes = getTraceNodes;
      _MetricIds.OptimizeNested = true;
      _CreateSession.ValueCanBeNull = true;
      _GetMetricDetails.ValueCanBeNull = true;
      _GetCurrentMetricPoint.ValueCanBeNull = true;
      BindableChildren.Add(new KeyValuePair<string, object>("createSession", _CreateSession));
      BindableChildren.Add(new KeyValuePair<string, object>("deleteSession", _DeleteSession));
      BindableChildren.Add(new KeyValuePair<string, object>("processStarted", _ProcessStarted));
      BindableChildren.Add(new KeyValuePair<string, object>("processTerminated", _ProcessTerminated));
      BindableChildren.Add(new KeyValuePair<string, object>("logReceived", _LogReceived));
      BindableChildren.Add(new KeyValuePair<string, object>("resources", _Resources));
      BindableChildren.Add(new KeyValuePair<string, object>("metricIds", _MetricIds));
      BindableChildren.Add(new KeyValuePair<string, object>("getMetricDetails", _GetMetricDetails));
      BindableChildren.Add(new KeyValuePair<string, object>("getCurrentMetricPoint", _GetCurrentMetricPoint));
      BindableChildren.Add(new KeyValuePair<string, object>("getTraceNodes", _GetTraceNodes));
    }
    //secondary constructor
    private AspireSessionHostModel (
    ) : this (
      new RdCall<SessionModel, SessionCreationResult>(SessionModel.Read, SessionModel.Write, ReadSessionCreationResultNullable, WriteSessionCreationResultNullable),
      new RdCall<string, bool>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool),
      new RdSignal<AspireSessionHost.Generated.ProcessStarted>(AspireSessionHost.Generated.ProcessStarted.Read, AspireSessionHost.Generated.ProcessStarted.Write),
      new RdSignal<AspireSessionHost.Generated.ProcessTerminated>(AspireSessionHost.Generated.ProcessTerminated.Read, AspireSessionHost.Generated.ProcessTerminated.Write),
      new RdSignal<AspireSessionHost.Generated.LogReceived>(AspireSessionHost.Generated.LogReceived.Read, AspireSessionHost.Generated.LogReceived.Write),
      new RdMap<string, ResourceWrapper>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, ResourceWrapper.Read, ResourceWrapper.Write),
      new RdList<ResourceMetricId>(ResourceMetricId.Read, ResourceMetricId.Write),
      new RdCall<ResourceMetricId, ResourceMetricDetails>(ResourceMetricId.Read, ResourceMetricId.Write, ReadResourceMetricDetailsNullable, WriteResourceMetricDetailsNullable),
      new RdCall<ResourceMetricId, ResourceMetricPoint>(ResourceMetricId.Read, ResourceMetricId.Write, ReadResourceMetricPointNullable, WriteResourceMetricPointNullable),
      new RdCall<Unit, TraceNode[]>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid, ReadTraceNodeArray, WriteTraceNodeArray)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<SessionCreationResult> ReadSessionCreationResultNullable = SessionCreationResult.Read.NullableClass();
    public static CtxReadDelegate<ResourceMetricDetails> ReadResourceMetricDetailsNullable = ResourceMetricDetails.Read.NullableClass();
    public static CtxReadDelegate<ResourceMetricPoint> ReadResourceMetricPointNullable = ResourceMetricPoint.Read.NullableClass();
    public static CtxReadDelegate<TraceNode[]> ReadTraceNodeArray = TraceNode.Read.Array();
    
    public static  CtxWriteDelegate<SessionCreationResult> WriteSessionCreationResultNullable = SessionCreationResult.Write.NullableClass();
    public static  CtxWriteDelegate<ResourceMetricDetails> WriteResourceMetricDetailsNullable = ResourceMetricDetails.Write.NullableClass();
    public static  CtxWriteDelegate<ResourceMetricPoint> WriteResourceMetricPointNullable = ResourceMetricPoint.Write.NullableClass();
    public static  CtxWriteDelegate<TraceNode[]> WriteTraceNodeArray = TraceNode.Write.Array();
    
    protected override long SerializationHash => 2654817673960334121L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      serializers.Register(LongResourceMetricPoint.Read, LongResourceMetricPoint.Write);
      serializers.Register(DoubleResourceMetricPoint.Read, DoubleResourceMetricPoint.Write);
      serializers.Register(HistogramResourceMetricPoint.Read, HistogramResourceMetricPoint.Write);
      serializers.Register(ResourceMetricPoint_Unknown.Read, ResourceMetricPoint_Unknown.Write);
      
      serializers.RegisterToplevelOnce(typeof(AspireSessionHostRoot), AspireSessionHostRoot.RegisterDeclaredTypesSerializers);
    }
    
    public AspireSessionHostModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("AspireSessionHostModel"));
      this.BindTopLevel(lifetime, protocol, "AspireSessionHostModel");
    }
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("AspireSessionHostModel (");
      using (printer.IndentCookie()) {
        printer.Print("createSession = "); _CreateSession.PrintEx(printer); printer.Println();
        printer.Print("deleteSession = "); _DeleteSession.PrintEx(printer); printer.Println();
        printer.Print("processStarted = "); _ProcessStarted.PrintEx(printer); printer.Println();
        printer.Print("processTerminated = "); _ProcessTerminated.PrintEx(printer); printer.Println();
        printer.Print("logReceived = "); _LogReceived.PrintEx(printer); printer.Println();
        printer.Print("resources = "); _Resources.PrintEx(printer); printer.Println();
        printer.Print("metricIds = "); _MetricIds.PrintEx(printer); printer.Println();
        printer.Print("getMetricDetails = "); _GetMetricDetails.PrintEx(printer); printer.Println();
        printer.Print("getCurrentMetricPoint = "); _GetCurrentMetricPoint.PrintEx(printer); printer.Println();
        printer.Print("getTraceNodes = "); _GetTraceNodes.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:132</p>
  /// </summary>
  public sealed class DoubleResourceMetricPoint : ResourceMetricPoint
  {
    //fields
    //public fields
    public double Value {get; private set;}
    
    //private fields
    //primary constructor
    public DoubleResourceMetricPoint(
      double value,
      long timestamp
    ) : base (
      timestamp
     ) 
    {
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<DoubleResourceMetricPoint> Read = (ctx, reader) => 
    {
      var timestamp = reader.ReadLong();
      var value = reader.ReadDouble();
      var _result = new DoubleResourceMetricPoint(value, timestamp);
      return _result;
    };
    
    public static new CtxWriteDelegate<DoubleResourceMetricPoint> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Timestamp);
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((DoubleResourceMetricPoint) obj);
    }
    public bool Equals(DoubleResourceMetricPoint other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Value == other.Value && Timestamp == other.Timestamp;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Value.GetHashCode();
        hash = hash * 31 + Timestamp.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("DoubleResourceMetricPoint (");
      using (printer.IndentCookie()) {
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
        printer.Print("timestamp = "); Timestamp.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:136</p>
  /// </summary>
  public sealed class HistogramResourceMetricPoint : ResourceMetricPoint
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public HistogramResourceMetricPoint(
      long timestamp
    ) : base (
      timestamp
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<HistogramResourceMetricPoint> Read = (ctx, reader) => 
    {
      var timestamp = reader.ReadLong();
      var _result = new HistogramResourceMetricPoint(timestamp);
      return _result;
    };
    
    public static new CtxWriteDelegate<HistogramResourceMetricPoint> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Timestamp);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((HistogramResourceMetricPoint) obj);
    }
    public bool Equals(HistogramResourceMetricPoint other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Timestamp == other.Timestamp;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Timestamp.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("HistogramResourceMetricPoint (");
      using (printer.IndentCookie()) {
        printer.Print("timestamp = "); Timestamp.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:27</p>
  /// </summary>
  public sealed class LogReceived : IPrintable, IEquatable<LogReceived>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    public bool IsStdErr {get; private set;}
    [NotNull] public string Message {get; private set;}
    
    //private fields
    //primary constructor
    public LogReceived(
      [NotNull] string id,
      bool isStdErr,
      [NotNull] string message
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (message == null) throw new ArgumentNullException("message");
      
      Id = id;
      IsStdErr = isStdErr;
      Message = message;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, out bool isStdErr, [NotNull] out string message)
    {
      id = Id;
      isStdErr = IsStdErr;
      message = Message;
    }
    //statics
    
    public static CtxReadDelegate<LogReceived> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var isStdErr = reader.ReadBool();
      var message = reader.ReadString();
      var _result = new LogReceived(id, isStdErr, message);
      return _result;
    };
    
    public static CtxWriteDelegate<LogReceived> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.IsStdErr);
      writer.Write(value.Message);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((LogReceived) obj);
    }
    public bool Equals(LogReceived other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && IsStdErr == other.IsStdErr && Message == other.Message;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + IsStdErr.GetHashCode();
        hash = hash * 31 + Message.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("LogReceived (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("isStdErr = "); IsStdErr.PrintEx(printer); printer.Println();
        printer.Print("message = "); Message.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:128</p>
  /// </summary>
  public sealed class LongResourceMetricPoint : ResourceMetricPoint
  {
    //fields
    //public fields
    public long Value {get; private set;}
    
    //private fields
    //primary constructor
    public LongResourceMetricPoint(
      long value,
      long timestamp
    ) : base (
      timestamp
     ) 
    {
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<LongResourceMetricPoint> Read = (ctx, reader) => 
    {
      var timestamp = reader.ReadLong();
      var value = reader.ReadLong();
      var _result = new LongResourceMetricPoint(value, timestamp);
      return _result;
    };
    
    public static new CtxWriteDelegate<LongResourceMetricPoint> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Timestamp);
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((LongResourceMetricPoint) obj);
    }
    public bool Equals(LongResourceMetricPoint other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Value == other.Value && Timestamp == other.Timestamp;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Value.GetHashCode();
        hash = hash * 31 + Timestamp.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("LongResourceMetricPoint (");
      using (printer.IndentCookie()) {
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
        printer.Print("timestamp = "); Timestamp.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:17</p>
  /// </summary>
  public sealed class ProcessStarted : IPrintable, IEquatable<ProcessStarted>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    public long Pid {get; private set;}
    
    //private fields
    //primary constructor
    public ProcessStarted(
      [NotNull] string id,
      long pid
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      
      Id = id;
      Pid = pid;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, out long pid)
    {
      id = Id;
      pid = Pid;
    }
    //statics
    
    public static CtxReadDelegate<ProcessStarted> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var pid = reader.ReadLong();
      var _result = new ProcessStarted(id, pid);
      return _result;
    };
    
    public static CtxWriteDelegate<ProcessStarted> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.Pid);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ProcessStarted) obj);
    }
    public bool Equals(ProcessStarted other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && Pid == other.Pid;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Pid.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ProcessStarted (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("pid = "); Pid.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:22</p>
  /// </summary>
  public sealed class ProcessTerminated : IPrintable, IEquatable<ProcessTerminated>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    public int ExitCode {get; private set;}
    
    //private fields
    //primary constructor
    public ProcessTerminated(
      [NotNull] string id,
      int exitCode
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      
      Id = id;
      ExitCode = exitCode;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, out int exitCode)
    {
      id = Id;
      exitCode = ExitCode;
    }
    //statics
    
    public static CtxReadDelegate<ProcessTerminated> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var exitCode = reader.ReadInt();
      var _result = new ProcessTerminated(id, exitCode);
      return _result;
    };
    
    public static CtxWriteDelegate<ProcessTerminated> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.ExitCode);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ProcessTerminated) obj);
    }
    public bool Equals(ProcessTerminated other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && ExitCode == other.ExitCode;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + ExitCode.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ProcessTerminated (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("exitCode = "); ExitCode.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:95</p>
  /// </summary>
  public sealed class ResourceEnvironmentVariable : IPrintable, IEquatable<ResourceEnvironmentVariable>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    [CanBeNull] public string Value {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceEnvironmentVariable(
      [NotNull] string key,
      [CanBeNull] string value
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      
      Key = key;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, [CanBeNull] out string value)
    {
      key = Key;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<ResourceEnvironmentVariable> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var value = ReadStringNullable(ctx, reader);
      var _result = new ResourceEnvironmentVariable(key, value);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<ResourceEnvironmentVariable> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      WriteStringNullable(ctx, writer, value.Value);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceEnvironmentVariable) obj);
    }
    public bool Equals(ResourceEnvironmentVariable other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && Equals(Value, other.Value);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + (Value != null ? Value.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceEnvironmentVariable (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:106</p>
  /// </summary>
  public sealed class ResourceLog : IPrintable, IEquatable<ResourceLog>
  {
    //fields
    //public fields
    [NotNull] public string Text {get; private set;}
    public bool IsError {get; private set;}
    public int LineNumber {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceLog(
      [NotNull] string text,
      bool isError,
      int lineNumber
    )
    {
      if (text == null) throw new ArgumentNullException("text");
      
      Text = text;
      IsError = isError;
      LineNumber = lineNumber;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string text, out bool isError, out int lineNumber)
    {
      text = Text;
      isError = IsError;
      lineNumber = LineNumber;
    }
    //statics
    
    public static CtxReadDelegate<ResourceLog> Read = (ctx, reader) => 
    {
      var text = reader.ReadString();
      var isError = reader.ReadBool();
      var lineNumber = reader.ReadInt();
      var _result = new ResourceLog(text, isError, lineNumber);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceLog> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Text);
      writer.Write(value.IsError);
      writer.Write(value.LineNumber);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceLog) obj);
    }
    public bool Equals(ResourceLog other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Text == other.Text && IsError == other.IsError && LineNumber == other.LineNumber;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Text.GetHashCode();
        hash = hash * 31 + IsError.GetHashCode();
        hash = hash * 31 + LineNumber.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceLog (");
      using (printer.IndentCookie()) {
        printer.Print("text = "); Text.PrintEx(printer); printer.Println();
        printer.Print("isError = "); IsError.PrintEx(printer); printer.Println();
        printer.Print("lineNumber = "); LineNumber.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:140</p>
  /// </summary>
  public sealed class ResourceMetric : IPrintable, IEquatable<ResourceMetric>
  {
    //fields
    //public fields
    [NotNull] public ResourceMetricId Id {get; private set;}
    public double Value {get; private set;}
    public long Timestamp {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceMetric(
      [NotNull] ResourceMetricId id,
      double value,
      long timestamp
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      
      Id = id;
      Value = value;
      Timestamp = timestamp;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out ResourceMetricId id, out double value, out long timestamp)
    {
      id = Id;
      value = Value;
      timestamp = Timestamp;
    }
    //statics
    
    public static CtxReadDelegate<ResourceMetric> Read = (ctx, reader) => 
    {
      var id = ResourceMetricId.Read(ctx, reader);
      var value = reader.ReadDouble();
      var timestamp = reader.ReadLong();
      var _result = new ResourceMetric(id, value, timestamp);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceMetric> Write = (ctx, writer, value) => 
    {
      ResourceMetricId.Write(ctx, writer, value.Id);
      writer.Write(value.Value);
      writer.Write(value.Timestamp);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceMetric) obj);
    }
    public bool Equals(ResourceMetric other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Id, other.Id) && Value == other.Value && Timestamp == other.Timestamp;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        hash = hash * 31 + Timestamp.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceMetric (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
        printer.Print("timestamp = "); Timestamp.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:118</p>
  /// </summary>
  public sealed class ResourceMetricDetails : IPrintable, IEquatable<ResourceMetricDetails>
  {
    //fields
    //public fields
    [NotNull] public ResourceMetricId Id {get; private set;}
    [NotNull] public string Description {get; private set;}
    [NotNull] public string Unit {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceMetricDetails(
      [NotNull] ResourceMetricId id,
      [NotNull] string description,
      [NotNull] string unit
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (description == null) throw new ArgumentNullException("description");
      if (unit == null) throw new ArgumentNullException("unit");
      
      Id = id;
      Description = description;
      Unit = unit;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out ResourceMetricId id, [NotNull] out string description, [NotNull] out string unit)
    {
      id = Id;
      description = Description;
      unit = Unit;
    }
    //statics
    
    public static CtxReadDelegate<ResourceMetricDetails> Read = (ctx, reader) => 
    {
      var id = ResourceMetricId.Read(ctx, reader);
      var description = reader.ReadString();
      var unit = reader.ReadString();
      var _result = new ResourceMetricDetails(id, description, unit);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceMetricDetails> Write = (ctx, writer, value) => 
    {
      ResourceMetricId.Write(ctx, writer, value.Id);
      writer.Write(value.Description);
      writer.Write(value.Unit);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceMetricDetails) obj);
    }
    public bool Equals(ResourceMetricDetails other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Id, other.Id) && Description == other.Description && Unit == other.Unit;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Description.GetHashCode();
        hash = hash * 31 + Unit.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceMetricDetails (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
        printer.Print("unit = "); Unit.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:112</p>
  /// </summary>
  public sealed class ResourceMetricId : IPrintable, IEquatable<ResourceMetricId>
  {
    //fields
    //public fields
    [NotNull] public string ResourceId {get; private set;}
    [NotNull] public string ScopeName {get; private set;}
    [NotNull] public string MetricName {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceMetricId(
      [NotNull] string resourceId,
      [NotNull] string scopeName,
      [NotNull] string metricName
    )
    {
      if (resourceId == null) throw new ArgumentNullException("resourceId");
      if (scopeName == null) throw new ArgumentNullException("scopeName");
      if (metricName == null) throw new ArgumentNullException("metricName");
      
      ResourceId = resourceId;
      ScopeName = scopeName;
      MetricName = metricName;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string resourceId, [NotNull] out string scopeName, [NotNull] out string metricName)
    {
      resourceId = ResourceId;
      scopeName = ScopeName;
      metricName = MetricName;
    }
    //statics
    
    public static CtxReadDelegate<ResourceMetricId> Read = (ctx, reader) => 
    {
      var resourceId = reader.ReadString();
      var scopeName = reader.ReadString();
      var metricName = reader.ReadString();
      var _result = new ResourceMetricId(resourceId, scopeName, metricName);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceMetricId> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ResourceId);
      writer.Write(value.ScopeName);
      writer.Write(value.MetricName);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceMetricId) obj);
    }
    public bool Equals(ResourceMetricId other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ResourceId == other.ResourceId && ScopeName == other.ScopeName && MetricName == other.MetricName;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ResourceId.GetHashCode();
        hash = hash * 31 + ScopeName.GetHashCode();
        hash = hash * 31 + MetricName.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceMetricId (");
      using (printer.IndentCookie()) {
        printer.Print("resourceId = "); ResourceId.PrintEx(printer); printer.Println();
        printer.Print("scopeName = "); ScopeName.PrintEx(printer); printer.Println();
        printer.Print("metricName = "); MetricName.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:124</p>
  /// </summary>
  public abstract class ResourceMetricPoint{
    //fields
    //public fields
    public long Timestamp {get; private set;}
    
    //private fields
    //primary constructor
    protected ResourceMetricPoint(
      long timestamp
    )
    {
      Timestamp = timestamp;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<ResourceMetricPoint> Read = Polymorphic<ResourceMetricPoint>.ReadAbstract(ResourceMetricPoint_Unknown.Read);
    
    public static CtxWriteDelegate<ResourceMetricPoint> Write = Polymorphic<ResourceMetricPoint>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class ResourceMetricPoint_Unknown : ResourceMetricPoint
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public ResourceMetricPoint_Unknown(
      long timestamp
    ) : base (
      timestamp
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<ResourceMetricPoint_Unknown> Read = (ctx, reader) => 
    {
      var timestamp = reader.ReadLong();
      var _result = new ResourceMetricPoint_Unknown(timestamp);
      return _result;
    };
    
    public static new CtxWriteDelegate<ResourceMetricPoint_Unknown> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Timestamp);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceMetricPoint_Unknown) obj);
    }
    public bool Equals(ResourceMetricPoint_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Timestamp == other.Timestamp;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Timestamp.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceMetricPoint_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("timestamp = "); Timestamp.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:57</p>
  /// </summary>
  public sealed class ResourceModel : IPrintable, IEquatable<ResourceModel>
  {
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    public ResourceType Type {get; private set;}
    [NotNull] public string DisplayName {get; private set;}
    [NotNull] public string Uid {get; private set;}
    [CanBeNull] public ResourceState? State {get; private set;}
    [CanBeNull] public ResourceStateStyle? StateStyle {get; private set;}
    public DateTime CreatedAt {get; private set;}
    [NotNull] public ResourceProperty[] Properties {get; private set;}
    [NotNull] public ResourceEnvironmentVariable[] Environment {get; private set;}
    [NotNull] public ResourceUrl[] Urls {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceModel(
      [NotNull] string name,
      ResourceType type,
      [NotNull] string displayName,
      [NotNull] string uid,
      [CanBeNull] ResourceState? state,
      [CanBeNull] ResourceStateStyle? stateStyle,
      DateTime createdAt,
      [NotNull] ResourceProperty[] properties,
      [NotNull] ResourceEnvironmentVariable[] environment,
      [NotNull] ResourceUrl[] urls
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      if (displayName == null) throw new ArgumentNullException("displayName");
      if (uid == null) throw new ArgumentNullException("uid");
      if (properties == null) throw new ArgumentNullException("properties");
      if (environment == null) throw new ArgumentNullException("environment");
      if (urls == null) throw new ArgumentNullException("urls");
      
      Name = name;
      Type = type;
      DisplayName = displayName;
      Uid = uid;
      State = state;
      StateStyle = stateStyle;
      CreatedAt = createdAt;
      Properties = properties;
      Environment = environment;
      Urls = urls;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string name, out ResourceType type, [NotNull] out string displayName, [NotNull] out string uid, [CanBeNull] out ResourceState? state, [CanBeNull] out ResourceStateStyle? stateStyle, out DateTime createdAt, [NotNull] out ResourceProperty[] properties, [NotNull] out ResourceEnvironmentVariable[] environment, [NotNull] out ResourceUrl[] urls)
    {
      name = Name;
      type = Type;
      displayName = DisplayName;
      uid = Uid;
      state = State;
      stateStyle = StateStyle;
      createdAt = CreatedAt;
      properties = Properties;
      environment = Environment;
      urls = Urls;
    }
    //statics
    
    public static CtxReadDelegate<ResourceModel> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var type = (ResourceType)reader.ReadInt();
      var displayName = reader.ReadString();
      var uid = reader.ReadString();
      var state = ReadResourceStateNullable(ctx, reader);
      var stateStyle = ReadResourceStateStyleNullable(ctx, reader);
      var createdAt = reader.ReadDateTime();
      var properties = ReadResourcePropertyArray(ctx, reader);
      var environment = ReadResourceEnvironmentVariableArray(ctx, reader);
      var urls = ReadResourceUrlArray(ctx, reader);
      var _result = new ResourceModel(name, type, displayName, uid, state, stateStyle, createdAt, properties, environment, urls);
      return _result;
    };
    public static CtxReadDelegate<ResourceState?> ReadResourceStateNullable = new CtxReadDelegate<ResourceState>(JetBrains.Rd.Impl.Serializers.ReadEnum<ResourceState>).NullableStruct();
    public static CtxReadDelegate<ResourceStateStyle?> ReadResourceStateStyleNullable = new CtxReadDelegate<ResourceStateStyle>(JetBrains.Rd.Impl.Serializers.ReadEnum<ResourceStateStyle>).NullableStruct();
    public static CtxReadDelegate<ResourceProperty[]> ReadResourcePropertyArray = ResourceProperty.Read.Array();
    public static CtxReadDelegate<ResourceEnvironmentVariable[]> ReadResourceEnvironmentVariableArray = ResourceEnvironmentVariable.Read.Array();
    public static CtxReadDelegate<ResourceUrl[]> ReadResourceUrlArray = ResourceUrl.Read.Array();
    
    public static CtxWriteDelegate<ResourceModel> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      writer.Write((int)value.Type);
      writer.Write(value.DisplayName);
      writer.Write(value.Uid);
      WriteResourceStateNullable(ctx, writer, value.State);
      WriteResourceStateStyleNullable(ctx, writer, value.StateStyle);
      writer.Write(value.CreatedAt);
      WriteResourcePropertyArray(ctx, writer, value.Properties);
      WriteResourceEnvironmentVariableArray(ctx, writer, value.Environment);
      WriteResourceUrlArray(ctx, writer, value.Urls);
    };
    public static  CtxWriteDelegate<ResourceState?> WriteResourceStateNullable = new CtxWriteDelegate<ResourceState>(JetBrains.Rd.Impl.Serializers.WriteEnum<ResourceState>).NullableStruct();
    public static  CtxWriteDelegate<ResourceStateStyle?> WriteResourceStateStyleNullable = new CtxWriteDelegate<ResourceStateStyle>(JetBrains.Rd.Impl.Serializers.WriteEnum<ResourceStateStyle>).NullableStruct();
    public static  CtxWriteDelegate<ResourceProperty[]> WriteResourcePropertyArray = ResourceProperty.Write.Array();
    public static  CtxWriteDelegate<ResourceEnvironmentVariable[]> WriteResourceEnvironmentVariableArray = ResourceEnvironmentVariable.Write.Array();
    public static  CtxWriteDelegate<ResourceUrl[]> WriteResourceUrlArray = ResourceUrl.Write.Array();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceModel) obj);
    }
    public bool Equals(ResourceModel other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && Type == other.Type && DisplayName == other.DisplayName && Uid == other.Uid && Equals(State, other.State) && Equals(StateStyle, other.StateStyle) && CreatedAt == other.CreatedAt && Properties.SequenceEqual(other.Properties) && Environment.SequenceEqual(other.Environment) && Urls.SequenceEqual(other.Urls);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + (int) Type;
        hash = hash * 31 + DisplayName.GetHashCode();
        hash = hash * 31 + Uid.GetHashCode();
        hash = hash * 31 + (State != null ? (int) State : 0);
        hash = hash * 31 + (StateStyle != null ? (int) StateStyle : 0);
        hash = hash * 31 + CreatedAt.GetHashCode();
        hash = hash * 31 + Properties.ContentHashCode();
        hash = hash * 31 + Environment.ContentHashCode();
        hash = hash * 31 + Urls.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceModel (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("type = "); Type.PrintEx(printer); printer.Println();
        printer.Print("displayName = "); DisplayName.PrintEx(printer); printer.Println();
        printer.Print("uid = "); Uid.PrintEx(printer); printer.Println();
        printer.Print("state = "); State.PrintEx(printer); printer.Println();
        printer.Print("stateStyle = "); StateStyle.PrintEx(printer); printer.Println();
        printer.Print("createdAt = "); CreatedAt.PrintEx(printer); printer.Println();
        printer.Print("properties = "); Properties.PrintEx(printer); printer.Println();
        printer.Print("environment = "); Environment.PrintEx(printer); printer.Println();
        printer.Print("urls = "); Urls.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:89</p>
  /// </summary>
  public sealed class ResourceProperty : IPrintable, IEquatable<ResourceProperty>
  {
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    [CanBeNull] public string DisplayName {get; private set;}
    [CanBeNull] public string Value {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceProperty(
      [NotNull] string name,
      [CanBeNull] string displayName,
      [CanBeNull] string value
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      
      Name = name;
      DisplayName = displayName;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string name, [CanBeNull] out string displayName, [CanBeNull] out string value)
    {
      name = Name;
      displayName = DisplayName;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<ResourceProperty> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var displayName = ReadStringNullable(ctx, reader);
      var value = ReadStringNullable(ctx, reader);
      var _result = new ResourceProperty(name, displayName, value);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<ResourceProperty> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      WriteStringNullable(ctx, writer, value.DisplayName);
      WriteStringNullable(ctx, writer, value.Value);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceProperty) obj);
    }
    public bool Equals(ResourceProperty other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && Equals(DisplayName, other.DisplayName) && Equals(Value, other.Value);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + (DisplayName != null ? DisplayName.GetHashCode() : 0);
        hash = hash * 31 + (Value != null ? Value.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceProperty (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("displayName = "); DisplayName.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:67</p>
  /// </summary>
  public enum ResourceState {
    Finished,
    Exited,
    FailedToStart,
    Starting,
    Running,
    Hidden,
    Unknown
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:76</p>
  /// </summary>
  public enum ResourceStateStyle {
    Success,
    Info,
    Warning,
    Error,
    Unknown
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:59</p>
  /// </summary>
  public enum ResourceType {
    Project,
    Container,
    Executable,
    Unknown
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:100</p>
  /// </summary>
  public sealed class ResourceUrl : IPrintable, IEquatable<ResourceUrl>
  {
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    [NotNull] public string FullUrl {get; private set;}
    public bool IsInternal {get; private set;}
    
    //private fields
    //primary constructor
    public ResourceUrl(
      [NotNull] string name,
      [NotNull] string fullUrl,
      bool isInternal
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      if (fullUrl == null) throw new ArgumentNullException("fullUrl");
      
      Name = name;
      FullUrl = fullUrl;
      IsInternal = isInternal;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string name, [NotNull] out string fullUrl, out bool isInternal)
    {
      name = Name;
      fullUrl = FullUrl;
      isInternal = IsInternal;
    }
    //statics
    
    public static CtxReadDelegate<ResourceUrl> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var fullUrl = reader.ReadString();
      var isInternal = reader.ReadBool();
      var _result = new ResourceUrl(name, fullUrl, isInternal);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceUrl> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      writer.Write(value.FullUrl);
      writer.Write(value.IsInternal);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ResourceUrl) obj);
    }
    public bool Equals(ResourceUrl other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && FullUrl == other.FullUrl && IsInternal == other.IsInternal;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + FullUrl.GetHashCode();
        hash = hash * 31 + IsInternal.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceUrl (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("fullUrl = "); FullUrl.PrintEx(printer); printer.Println();
        printer.Print("isInternal = "); IsInternal.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:51</p>
  /// </summary>
  public sealed class ResourceWrapper : RdBindableBase
  {
    //fields
    //public fields
    [NotNull] public IViewableProperty<ResourceModel> Model => _Model;
    [NotNull] public IViewableProperty<bool> IsInitialized => _IsInitialized;
    [NotNull] public void LogReceived(ResourceLog value) => _LogReceived.Fire(value);
    
    //private fields
    [NotNull] private readonly RdProperty<ResourceModel> _Model;
    [NotNull] private readonly RdProperty<bool> _IsInitialized;
    [NotNull] private readonly RdSignal<ResourceLog> _LogReceived;
    
    //primary constructor
    private ResourceWrapper(
      [NotNull] RdProperty<ResourceModel> model,
      [NotNull] RdProperty<bool> isInitialized,
      [NotNull] RdSignal<ResourceLog> logReceived
    )
    {
      if (model == null) throw new ArgumentNullException("model");
      if (isInitialized == null) throw new ArgumentNullException("isInitialized");
      if (logReceived == null) throw new ArgumentNullException("logReceived");
      
      _Model = model;
      _IsInitialized = isInitialized;
      _LogReceived = logReceived;
      _Model.OptimizeNested = true;
      _IsInitialized.OptimizeNested = true;
      _IsInitialized.Async = true;
      BindableChildren.Add(new KeyValuePair<string, object>("model", _Model));
      BindableChildren.Add(new KeyValuePair<string, object>("isInitialized", _IsInitialized));
      BindableChildren.Add(new KeyValuePair<string, object>("logReceived", _LogReceived));
    }
    //secondary constructor
    public ResourceWrapper (
    ) : this (
      new RdProperty<ResourceModel>(ResourceModel.Read, ResourceModel.Write),
      new RdProperty<bool>(JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool),
      new RdSignal<ResourceLog>(ResourceLog.Read, ResourceLog.Write)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<ResourceWrapper> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var model = RdProperty<ResourceModel>.Read(ctx, reader, ResourceModel.Read, ResourceModel.Write);
      var isInitialized = RdProperty<bool>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool);
      var logReceived = RdSignal<ResourceLog>.Read(ctx, reader, ResourceLog.Read, ResourceLog.Write);
      var _result = new ResourceWrapper(model, isInitialized, logReceived).WithId(_id);
      return _result;
    };
    
    public static CtxWriteDelegate<ResourceWrapper> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      RdProperty<ResourceModel>.Write(ctx, writer, value._Model);
      RdProperty<bool>.Write(ctx, writer, value._IsInitialized);
      RdSignal<ResourceLog>.Write(ctx, writer, value._LogReceived);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("ResourceWrapper (");
      using (printer.IndentCookie()) {
        printer.Print("model = "); _Model.PrintEx(printer); printer.Println();
        printer.Print("isInitialized = "); _IsInitialized.PrintEx(printer); printer.Println();
        printer.Print("logReceived = "); _LogReceived.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:47</p>
  /// </summary>
  public sealed class SessionCreationResult : IPrintable, IEquatable<SessionCreationResult>
  {
    //fields
    //public fields
    [NotNull] public string SessionId {get; private set;}
    
    //private fields
    //primary constructor
    public SessionCreationResult(
      [NotNull] string sessionId
    )
    {
      if (sessionId == null) throw new ArgumentNullException("sessionId");
      
      SessionId = sessionId;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string sessionId)
    {
      sessionId = SessionId;
    }
    //statics
    
    public static CtxReadDelegate<SessionCreationResult> Read = (ctx, reader) => 
    {
      var sessionId = reader.ReadString();
      var _result = new SessionCreationResult(sessionId);
      return _result;
    };
    
    public static CtxWriteDelegate<SessionCreationResult> Write = (ctx, writer, value) => 
    {
      writer.Write(value.SessionId);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((SessionCreationResult) obj);
    }
    public bool Equals(SessionCreationResult other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return SessionId == other.SessionId;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + SessionId.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("SessionCreationResult (");
      using (printer.IndentCookie()) {
        printer.Print("sessionId = "); SessionId.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:33</p>
  /// </summary>
  public sealed class SessionEnvironmentVariable : IPrintable, IEquatable<SessionEnvironmentVariable>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    [NotNull] public string Value {get; private set;}
    
    //private fields
    //primary constructor
    public SessionEnvironmentVariable(
      [NotNull] string key,
      [NotNull] string value
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      if (value == null) throw new ArgumentNullException("value");
      
      Key = key;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, [NotNull] out string value)
    {
      key = Key;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<SessionEnvironmentVariable> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var value = reader.ReadString();
      var _result = new SessionEnvironmentVariable(key, value);
      return _result;
    };
    
    public static CtxWriteDelegate<SessionEnvironmentVariable> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((SessionEnvironmentVariable) obj);
    }
    public bool Equals(SessionEnvironmentVariable other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && Value == other.Value;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("SessionEnvironmentVariable (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:38</p>
  /// </summary>
  public sealed class SessionModel : IPrintable, IEquatable<SessionModel>
  {
    //fields
    //public fields
    [NotNull] public string ProjectPath {get; private set;}
    public bool Debug {get; private set;}
    [CanBeNull] public string LaunchProfile {get; private set;}
    public bool DisableLaunchProfile {get; private set;}
    [CanBeNull] public string[] Args {get; private set;}
    [CanBeNull] public SessionEnvironmentVariable[] Envs {get; private set;}
    
    //private fields
    //primary constructor
    public SessionModel(
      [NotNull] string projectPath,
      bool debug,
      [CanBeNull] string launchProfile,
      bool disableLaunchProfile,
      [CanBeNull] string[] args,
      [CanBeNull] SessionEnvironmentVariable[] envs
    )
    {
      if (projectPath == null) throw new ArgumentNullException("projectPath");
      
      ProjectPath = projectPath;
      Debug = debug;
      LaunchProfile = launchProfile;
      DisableLaunchProfile = disableLaunchProfile;
      Args = args;
      Envs = envs;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string projectPath, out bool debug, [CanBeNull] out string launchProfile, out bool disableLaunchProfile, [CanBeNull] out string[] args, [CanBeNull] out SessionEnvironmentVariable[] envs)
    {
      projectPath = ProjectPath;
      debug = Debug;
      launchProfile = LaunchProfile;
      disableLaunchProfile = DisableLaunchProfile;
      args = Args;
      envs = Envs;
    }
    //statics
    
    public static CtxReadDelegate<SessionModel> Read = (ctx, reader) => 
    {
      var projectPath = reader.ReadString();
      var debug = reader.ReadBool();
      var launchProfile = ReadStringNullable(ctx, reader);
      var disableLaunchProfile = reader.ReadBool();
      var args = ReadStringArrayNullable(ctx, reader);
      var envs = ReadSessionEnvironmentVariableArrayNullable(ctx, reader);
      var _result = new SessionModel(projectPath, debug, launchProfile, disableLaunchProfile, args, envs);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    public static CtxReadDelegate<string[]> ReadStringArrayNullable = JetBrains.Rd.Impl.Serializers.ReadString.Array().NullableClass();
    public static CtxReadDelegate<SessionEnvironmentVariable[]> ReadSessionEnvironmentVariableArrayNullable = SessionEnvironmentVariable.Read.Array().NullableClass();
    
    public static CtxWriteDelegate<SessionModel> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ProjectPath);
      writer.Write(value.Debug);
      WriteStringNullable(ctx, writer, value.LaunchProfile);
      writer.Write(value.DisableLaunchProfile);
      WriteStringArrayNullable(ctx, writer, value.Args);
      WriteSessionEnvironmentVariableArrayNullable(ctx, writer, value.Envs);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    public static  CtxWriteDelegate<string[]> WriteStringArrayNullable = JetBrains.Rd.Impl.Serializers.WriteString.Array().NullableClass();
    public static  CtxWriteDelegate<SessionEnvironmentVariable[]> WriteSessionEnvironmentVariableArrayNullable = SessionEnvironmentVariable.Write.Array().NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((SessionModel) obj);
    }
    public bool Equals(SessionModel other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ProjectPath == other.ProjectPath && Debug == other.Debug && Equals(LaunchProfile, other.LaunchProfile) && DisableLaunchProfile == other.DisableLaunchProfile && Equals(Args, other.Args) && Equals(Envs, other.Envs);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ProjectPath.GetHashCode();
        hash = hash * 31 + Debug.GetHashCode();
        hash = hash * 31 + (LaunchProfile != null ? LaunchProfile.GetHashCode() : 0);
        hash = hash * 31 + DisableLaunchProfile.GetHashCode();
        hash = hash * 31 + (Args != null ? Args.ContentHashCode() : 0);
        hash = hash * 31 + (Envs != null ? Envs.ContentHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("SessionModel (");
      using (printer.IndentCookie()) {
        printer.Print("projectPath = "); ProjectPath.PrintEx(printer); printer.Println();
        printer.Print("debug = "); Debug.PrintEx(printer); printer.Println();
        printer.Print("launchProfile = "); LaunchProfile.PrintEx(printer); printer.Println();
        printer.Print("disableLaunchProfile = "); DisableLaunchProfile.PrintEx(printer); printer.Println();
        printer.Print("args = "); Args.PrintEx(printer); printer.Println();
        printer.Print("envs = "); Envs.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:146</p>
  /// </summary>
  public sealed class TraceNode : IPrintable, IEquatable<TraceNode>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    [NotNull] public string Name {get; private set;}
    [CanBeNull] public string ServiceName {get; private set;}
    [NotNull] public List<TraceNodeChild> Children {get; private set;}
    [NotNull] public List<TraceNodeAttribute> Attributes {get; private set;}
    
    //private fields
    //primary constructor
    public TraceNode(
      [NotNull] string id,
      [NotNull] string name,
      [CanBeNull] string serviceName,
      [NotNull] List<TraceNodeChild> children,
      [NotNull] List<TraceNodeAttribute> attributes
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (name == null) throw new ArgumentNullException("name");
      if (children == null) throw new ArgumentNullException("children");
      if (attributes == null) throw new ArgumentNullException("attributes");
      
      Id = id;
      Name = name;
      ServiceName = serviceName;
      Children = children;
      Attributes = attributes;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, [NotNull] out string name, [CanBeNull] out string serviceName, [NotNull] out List<TraceNodeChild> children, [NotNull] out List<TraceNodeAttribute> attributes)
    {
      id = Id;
      name = Name;
      serviceName = ServiceName;
      children = Children;
      attributes = Attributes;
    }
    //statics
    
    public static CtxReadDelegate<TraceNode> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var name = reader.ReadString();
      var serviceName = ReadStringNullable(ctx, reader);
      var children = ReadTraceNodeChildList(ctx, reader);
      var attributes = ReadTraceNodeAttributeList(ctx, reader);
      var _result = new TraceNode(id, name, serviceName, children, attributes);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    public static CtxReadDelegate<List<TraceNodeChild>> ReadTraceNodeChildList = TraceNodeChild.Read.List();
    public static CtxReadDelegate<List<TraceNodeAttribute>> ReadTraceNodeAttributeList = TraceNodeAttribute.Read.List();
    
    public static CtxWriteDelegate<TraceNode> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.Name);
      WriteStringNullable(ctx, writer, value.ServiceName);
      WriteTraceNodeChildList(ctx, writer, value.Children);
      WriteTraceNodeAttributeList(ctx, writer, value.Attributes);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    public static  CtxWriteDelegate<List<TraceNodeChild>> WriteTraceNodeChildList = TraceNodeChild.Write.List();
    public static  CtxWriteDelegate<List<TraceNodeAttribute>> WriteTraceNodeAttributeList = TraceNodeAttribute.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((TraceNode) obj);
    }
    public bool Equals(TraceNode other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && Name == other.Name && Equals(ServiceName, other.ServiceName) && Children.SequenceEqual(other.Children) && Attributes.SequenceEqual(other.Attributes);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + (ServiceName != null ? ServiceName.GetHashCode() : 0);
        hash = hash * 31 + Children.ContentHashCode();
        hash = hash * 31 + Attributes.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("TraceNode (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("serviceName = "); ServiceName.PrintEx(printer); printer.Println();
        printer.Print("children = "); Children.PrintEx(printer); printer.Println();
        printer.Print("attributes = "); Attributes.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:159</p>
  /// </summary>
  public sealed class TraceNodeAttribute : IPrintable, IEquatable<TraceNodeAttribute>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    [NotNull] public string Value {get; private set;}
    
    //private fields
    //primary constructor
    public TraceNodeAttribute(
      [NotNull] string key,
      [NotNull] string value
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      if (value == null) throw new ArgumentNullException("value");
      
      Key = key;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, [NotNull] out string value)
    {
      key = Key;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<TraceNodeAttribute> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var value = reader.ReadString();
      var _result = new TraceNodeAttribute(key, value);
      return _result;
    };
    
    public static CtxWriteDelegate<TraceNodeAttribute> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((TraceNodeAttribute) obj);
    }
    public bool Equals(TraceNodeAttribute other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && Value == other.Value;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("TraceNodeAttribute (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:154</p>
  /// </summary>
  public sealed class TraceNodeChild : IPrintable, IEquatable<TraceNodeChild>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    public int ConnectionCount {get; private set;}
    
    //private fields
    //primary constructor
    public TraceNodeChild(
      [NotNull] string id,
      int connectionCount
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      
      Id = id;
      ConnectionCount = connectionCount;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, out int connectionCount)
    {
      id = Id;
      connectionCount = ConnectionCount;
    }
    //statics
    
    public static CtxReadDelegate<TraceNodeChild> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var connectionCount = reader.ReadInt();
      var _result = new TraceNodeChild(id, connectionCount);
      return _result;
    };
    
    public static CtxWriteDelegate<TraceNodeChild> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.ConnectionCount);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((TraceNodeChild) obj);
    }
    public bool Equals(TraceNodeChild other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && ConnectionCount == other.ConnectionCount;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + ConnectionCount.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("TraceNodeChild (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("connectionCount = "); ConnectionCount.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
